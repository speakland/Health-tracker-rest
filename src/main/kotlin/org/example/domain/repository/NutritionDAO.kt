package org.example.domain.repository
import org.example.domain.Activity
import org.example.domain.Nutrition
import org.example.domain.db.Activities
import org.example.domain.db.Nutritions
import org.example.utils.mapToActivity
import org.example.utils.mapToNutrition
import org.jetbrains.exposed.sql.SqlExpressionBuilder.eq
import org.jetbrains.exposed.sql.deleteWhere
import org.jetbrains.exposed.sql.insert
import org.jetbrains.exposed.sql.selectAll
import org.jetbrains.exposed.sql.transactions.transaction
import org.jetbrains.exposed.sql.update

class NutritionDAO {

    //Get all the nutritions in the database regardless of user id
    fun getAll(): ArrayList<Nutrition> {
        val nutritionsList: ArrayList<Nutrition> = arrayListOf()
        transaction {
            Nutritions.selectAll().map {
                nutritionsList.add(mapToNutrition(it))
            }
        }
        return nutritionsList
    }

    fun findByNutritionId(id: Int): Nutrition?{
        return transaction {
            Nutritions
                .selectAll().where { Nutritions.id eq id}
                .map{ mapToNutrition(it) }
                .firstOrNull()
        }
    }


    //Find all nutritions for a specific user id
    fun findByUserId(userId: Int): List<Nutrition> {
        return transaction {
            Nutritions
                .selectAll().where { Nutritions.userId eq userId }
                .map { mapToNutrition(it) }
        }
    }

    fun save(nutrition: Nutrition): Int {
        return transaction {
            val nutritionId = Nutritions.insert {
                it[name] = nutrition.name
                it[calories] = nutrition.calories
                it[fat] = nutrition.fat
                it[carbs] = nutrition.carbs
                it[protein] = nutrition.protein
                it[waterIntake] = nutrition.waterIntake
                it[loggedDate] = nutrition.loggedDate
                it[userId] = nutrition.userId
            } get Nutritions.id
            //returns the activity id as generated by the table
            nutritionId
        }
    }


    fun updateByNutritionId(nutritionId: Int, nutritionToUpdate: Nutrition) : Int{
        return transaction {
            Nutritions.update ({
                Nutritions.id eq nutritionId}) {
                it[name] = nutritionToUpdate.name
                it[calories] = nutritionToUpdate.calories
                it[fat] = nutritionToUpdate.fat
                it[carbs] = nutritionToUpdate.carbs
                it[protein] = nutritionToUpdate.protein
                it[waterIntake] = nutritionToUpdate.waterIntake
                it[loggedDate] = nutritionToUpdate.loggedDate
                it[userId] = nutritionToUpdate.userId
            }
        }
    }

    fun deleteByNutritionId (nutritionId: Int): Int{
        return transaction{
            Nutritions.deleteWhere { Nutritions.id eq nutritionId }
        }
    }

    fun deleteByUserId (userId: Int): Int{
        return transaction{
            Nutritions.deleteWhere { Nutritions.userId eq userId }
        }
    }
}